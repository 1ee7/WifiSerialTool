

#include "global.h"

static const char *TAG = "espnow_serial";
static xQueueHandle s_espnow_send_queue;
static xQueueHandle s_espnow_recv_queue;

#define PATTERN_CHR_NUM (3)

static uint8_t s_broadcast_mac[ESP_NOW_ETH_ALEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};

static uint8_t s_desc_mac[ESP_NOW_ETH_ALEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};

static uint16_t s_espnow_seq[ESPNOW_DATA_MAX] = {0, 0};

static void myapp_espnow_send_cb(const uint8_t *mac_addr, esp_now_send_status_t status)
{
    espnow_event_t evt;
    espnow_event_send_cb_t *send_cb = &evt.info.send_cb;

    if (mac_addr == NULL)
    {
        ESP_LOGE(TAG, "Send cb arg error");
        return;
    }

    evt.id = MYAPP_ESPNOW_SEND_CB;
    memcpy(send_cb->mac_addr, mac_addr, ESP_NOW_ETH_ALEN);
    send_cb->status = status;

    printf("\n========= send callback ==========\n");
    for (int i = 0; i < ESP_NOW_ETH_ALEN; i++)
    {
        printf("%02X", mac_addr[i]);
        if (i < ESP_NOW_ETH_ALEN - 1)
            printf("-");
    }

    printf("\n status:%s\n", status ? "Fail" : "Success");
    printf("\n========= send callback ==========\n");

    // if (xQueueSend(s_espnow_queue, &evt, ESPNOW_MAXDELAY) != pdTRUE)
    // {
    //     ESP_LOGW(TAG, "Send send queue fail");
    // }
}

static void myapp_espnow_recv_cb(const uint8_t *mac_addr, const uint8_t *data, int len)
{
    espnow_event_t evt;
    espnow_event_recv_cb_t *recv_cb = &evt.info.recv_cb;

    if (mac_addr == NULL || data == NULL || len <= 0)
    {
        ESP_LOGE(TAG, "Receive cb arg error");
        return;
    }

    evt.id = MYAPP_ESPNOW_RECV_CB;
    memcpy(recv_cb->mac_addr, mac_addr, ESP_NOW_ETH_ALEN);

    printf("\n========= recv callback ==========\n");
    for (int i = 0; i < ESP_NOW_ETH_ALEN; i++)
    {
        printf("%02X", mac_addr[i]);
        if (i < ESP_NOW_ETH_ALEN - 1)
            printf("-");
    }
    printf("\n========= recv callback ==========\n");

    uart_write_bytes(UART_NUM_1, (const char *)data, len);
    // recv_cb->data = malloc(len);
    // if (recv_cb->data == NULL)
    // {
    //     ESP_LOGE(TAG, "Malloc receive data fail");
    //     return;
    // }
    // memcpy(recv_cb->data, data, len);
    // recv_cb->data_len = len;
    // if (xQueueSend(s_espnow_queue, &evt, ESPNOW_MAXDELAY) != pdTRUE)
    // {
    //     ESP_LOGW(TAG, "Send receive queue fail");
    //     free(recv_cb->data);
    // }
}

/* WiFi should start before using ESPNOW */
static void myapp_wifi_init(void)
{
    ESP_ERROR_CHECK(esp_netif_init());
    ESP_ERROR_CHECK(esp_event_loop_create_default());
    wifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();
    ESP_ERROR_CHECK(esp_wifi_init(&cfg));
    ESP_ERROR_CHECK(esp_wifi_set_storage(WIFI_STORAGE_RAM));
    ESP_ERROR_CHECK(esp_wifi_set_mode(ESPNOW_WIFI_MODE));
    ESP_ERROR_CHECK(esp_wifi_start());

    // ESP_ERROR_CHECK(esp_wifi_set_protocol(ESPNOW_WIFI_IF, WIFI_PROTOCOL_11B | WIFI_PROTOCOL_11G | WIFI_PROTOCOL_11N | WIFI_PROTOCOL_LR));
}

static void myapp_espnow_init(void)
{
    // espnow_send_param_t *send_param;
    s_espnow_send_queue = xQueueCreate(ESPNOW_QUEUE_SIZE, sizeof(espnow_send_param_t));

    if (s_espnow_queue == NULL)
    {
        ESP_LOGE(TAG, "Create mutex fail");
        return;
    }

    /* Initialize ESPNOW and register sending and receiving callback function. */
    ESP_ERROR_CHECK(esp_now_init());
    ESP_ERROR_CHECK(esp_now_register_send_cb(myapp_espnow_send_cb));
    ESP_ERROR_CHECK(esp_now_register_recv_cb(myapp_espnow_recv_cb));

    /* Set primary master key. */
    ESP_ERROR_CHECK(esp_now_set_pmk((uint8_t *)CONFIG_ESPNOW_PMK));

    /* Add broadcast peer information to peer list. */
    esp_now_peer_info_t *peer = malloc(sizeof(esp_now_peer_info_t));
    if (peer == NULL)
    {
        ESP_LOGE(TAG, "Malloc peer information fail");
        vSemaphoreDelete(s_espnow_queue);
        esp_now_deinit();
        return;
    }
    memset(peer, 0, sizeof(esp_now_peer_info_t));
    peer->channel = CONFIG_ESPNOW_CHANNEL;
    peer->ifidx = ESPNOW_WIFI_IF;
    peer->encrypt = false;
    memcpy(peer->peer_addr, s_broadcast_mac, ESP_NOW_ETH_ALEN);
    ESP_ERROR_CHECK(esp_now_add_peer(peer));
    free(peer);

    /* Initialize sending parameters. */
    send_param = malloc(sizeof(espnow_send_param_t));
    memset(send_param, 0, sizeof(espnow_send_param_t));
    if (send_param == NULL)
    {
        ESP_LOGE(TAG, "Malloc send parameter fail");
        vSemaphoreDelete(s_espnow_queue);
        esp_now_deinit();
    }

    return;
    // send_param->unicast = false;
    // send_param->broadcast = true;
    // send_param->state = 0;
    // send_param->magic = esp_random();
    // send_param->count = 100;
    // send_param->delay = 1000;
    // send_param->len = 100;
    // send_param->buffer = malloc(CONFIG_ESPNOW_SEND_LEN);
    // if (send_param->buffer == NULL)
    // {
    //     ESP_LOGE(TAG, "Malloc send buffer fail");
    //     free(send_param);
    //     vSemaphoreDelete(s_example_espnow_queue);
    //     esp_now_deinit();
    //     return ESP_FAIL;
    // }
    // memcpy(send_param->dest_mac, s_broadcast_mac, ESP_NOW_ETH_ALEN);
    // example_espnow_data_prepare(send_param);

    // xTaskCreate(example_espnow_task, "example_espnow_task", 2048, send_param, 4, NULL);

    // return ESP_OK;
}

static void myapp_espnow_task(void *pvParameter)
{
    example_espnow_event_t evt;
    // uint8_t recvBuf[RD_BUF_SIZE];

    espnow_send_param_t m_send_param;
    espnow_data_t send_buf;

    // uint8_t recv_state = 0;
    // uint16_t recv_seq = 0;
    // int recv_magic = 0;
    // bool is_broadcast = false;
    // int ret;

    uint16_t send_payload_len;

    // vTaskDelay(5000 / portTICK_RATE_MS);
    /* Start sending broadcast ESPNOW data. */

    for (;;)
    {
        //发送数据队列 数据检测
        if (xQueueReceive(s_espnow_send_queue, &m_send_param, 0) == pdTRUE)
        {
            if (m_send_param.type) // unicast
            {
                memcpy(m_send_param.dest_mac, s_desc_mac, ESP_NOW_ETH_ALEN);
                send_buf.type = EXAMPLE_ESPNOW_DATA_UNICAST;
            }
            else // broadcast
            {
                memcpy(m_send_param.dest_mac, s_broadcast_mac, ESP_NOW_ETH_ALEN);
                send_buf.type = EXAMPLE_ESPNOW_DATA_BROADCAST;
            }
            /* 数据长度 过长 的情况下拆分数据，分别发送 */
            send_payload_len = m_send_param.totalsize;

            /*
                       assert(send_param->len >= sizeof(example_espnow_data_t));
                       buf->type = IS_BROADCAST_ADDR(send_param->dest_mac) ? EXAMPLE_ESPNOW_DATA_BROADCAST : EXAMPLE_ESPNOW_DATA_UNICAST;
                       buf->state = send_param->state;
                       buf->seq_num = s_example_espnow_seq[buf->type]++;
                       buf->crc = 0;
                       buf->magic = send_param->magic;
                       // Fill all remaining bytes after the data with random values
                       esp_fill_random(buf->payload, send_param->len - sizeof(example_espnow_data_t));
                       buf->crc = esp_crc16_le(UINT16_MAX, (uint8_t const *)buf, send_param->len);
            */
            uint8_t index = 0;
            while (send_payload_len > 0)
            {
                printf("\n=========== debug printf:[packet num:%d]=========\n", send_payload_len / MAX_LEN_ESPNOW_SEND_RECV);
                if (send_payload_len / MAX_LEN_ESPNOW_SEND_RECV >= 1)
                {
                    send_buf.seq_num = s_espnow_seq[send_buf->type]++;

                    if (esp_now_send(m_send_param.dest_mac, m_send_param.buffer[], MAX_LEN_ESPNOW_SEND_RECV) != ESP_OK)
                    {
                        ESP_LOGE(TAG, "Send error");
                    }
                }
            }
        }

        // //接收数据队列 数据检测
        // if (xQueueReceive(s_espnow_recv_queue, recvBuf, 0) == pdTRUE)
        // {
        // }

        vTaskDelay(10 / portTICK_RATE_MS); // 10ms 延时
    }
}

void espnow_sendData_pack(espnow_send_param_t *send_param_t, uint8_t *data, uint8_t type)
{
    espnow_event_t evt;
    espnow_event_recv_cb_t *recv_cb = &evt.info.recv_cb;
}

static void uart_event_task(void *pvParameters)
{
    uart_event_t event;
    size_t buffered_size;
    uint8_t *dtmp = (uint8_t *)malloc(RD_BUF_SIZE);
    espnow_send_param_t m_uart_espnow_send_param_t;

    /*
    uint8_t type;                       // 0- broadcaset;1-unicast
    uint8_t serno;                      // for mult package count >1
    uint8_t state;                      // Indicate that if has received broadcast ESPNOW data or not.
    uint32_t magic;                     // Magic number which is used to determine which device to send unicast ESPNOW data.
    uint16_t count;                     // Total count of unicast ESPNOW data to be sent.
    uint16_t delay;                     // Delay between sending two ESPNOW data, unit: ms.
    int len;                            // Length of ESPNOW data to be sent, unit: byte.
    uint8_t *buffer;                    // Buffer pointing to ESPNOW data.
    uint8_t dest_mac[ESP_NOW_ETH_ALEN]; // MAC address of destination device.
    */

    for (;;)
    {
        // Waiting for UART event.
        if (xQueueReceive(uart1_queue, (void *)&event, (portTickType)portMAX_DELAY))
        {
            bzero(dtmp, RD_BUF_SIZE);
            ESP_LOGI(TAG, "uart[%d] event:", UART_NUM_1);
            switch (event.type)
            {
            case UART_DATA:
                ESP_LOGI(TAG, "[UART DATA LEN]: %d \n", event.size);
                uart_read_bytes(UART_NUM_1, dtmp, event.size, portMAX_DELAY);
                ESP_LOGI(TAG, "[DATA GOT SEND TO QUEUE]");

                if(event.size < 250)
                espnow_sendData_pack

                // m_uart_espnow_send_param_t.type = ESPNOW_DATA_UNICAST; // 1
                // m_uart_espnow_send_param_t.totalsize = event.size;
                // m_uart_espnow_send_param_t.buffer = dtmp

                    // for (int i = 0; i < event.size; i++)
                    //     printf("x%02X ", dtmp[i]);
                    // printf("\n");

                //     if (xQueueSend(s_espnow_send_queue, &m_uart_espnow_send_param_t, 0) != pdTRUE) //立即返回
                // {
                //     ESP_LOGW(TAG, "Send send queue fail");
                // }

                break;
            // Event of HW FIFO overflow detected
            case UART_FIFO_OVF:
                ESP_LOGI(TAG, "hw fifo overflow");
                // If fifo overflow happened, you should consider adding flow control for your application.
                // The ISR has already reset the rx FIFO,
                // As an example, we directly flush the rx buffer here in order to read more data.
                uart_flush_input(UART_NUM_1);
                // xQueueReset(uart1_queue);
                break;
            // Event of UART ring buffer full
            case UART_BUFFER_FULL:
                ESP_LOGI(TAG, "ring buffer full");
                // If buffer full happened, you should consider encreasing your buffer size
                // As an example, we directly flush the rx buffer here in order to read more data.
                uart_flush_input(UART_NUM_1);
                // xQueueReset(uart1_queue);
                break;
            // Event of UART RX break detected
            case UART_BREAK:
                ESP_LOGI(TAG, "uart rx break");
                break;
            // Event of UART parity check error
            case UART_PARITY_ERR:
                ESP_LOGI(TAG, "uart parity error");
                break;
            // Event of UART frame error
            case UART_FRAME_ERR:
                ESP_LOGI(TAG, "uart frame error");
                break;

            // Others
            default:
                ESP_LOGI(TAG, "uart event type: %d", event.type);
                break;
            }
        }
    }
    free(dtmp);
    dtmp = NULL;
    vTaskDelete(NULL);
}

static void myapp_serial_init()
{
    uart_config_t uart_config = {
        .baud_rate = 115200,
        .data_bits = UART_DATA_8_BITS,
        .parity = UART_PARITY_DISABLE,
        .stop_bits = UART_STOP_BITS_1,
        .flow_ctrl = UART_HW_FLOWCTRL_DISABLE,
        .source_clk = UART_SCLK_APB,
    };
    // Install UART driver, and get the queue.
    uart_driver_install(UART_NUM_1, UART_BUF_SIZE * 2, UART_BUF_SIZE * 2, 20, &uart1_queue, 0);
    uart_param_config(UART_NUM_1, &uart_config);

    // Set UART pins (using UART0 default pins ie no changes.)
    uart_set_pin(UART_NUM_1, 32, 33, UART_PIN_NO_CHANGE, UART_PIN_NO_CHANGE);

    // err = uart_set_pin(MB_PORT_NUM, 32, 33,
    //                17, UART_PIN_NO_CHANGE);

    // //Set uart pattern detect function.
    // uart_enable_pattern_det_baud_intr(UART_NUM_1, '+', PATTERN_CHR_NUM, 9, 0, 0);
    // //Reset the pattern queue length to record at most 20 pattern positions.
    // uart_pattern_queue_reset(UART_NUM_1, 20);

    // // Create a task to handler UART event from ISR
    // xTaskCreate(uart_event_task, "uart_event_task", 2048, NULL, 12, NULL);
}

void app_main(void)
{
    // Initialize NVS
    esp_err_t ret = nvs_flash_init();
    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)
    {
        ESP_ERROR_CHECK(nvs_flash_erase());
        ret = nvs_flash_init();
    }
    ESP_ERROR_CHECK(ret);

    myapp_wifi_init();
    myapp_espnow_init();

    myapp_serial_init();

    // Create a task to handler UART event from ISR
    xTaskCreate(uart_event_task, "uart_event_task", 2048, NULL, 12, NULL);
    xTaskCreate(myapp_espnow_task, "myapp_espnow_task", 2048, NULL, 12, NULL);
}
